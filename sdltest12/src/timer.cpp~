#include <iostream>
#include <sstream>
#include <string>
#include "SDL/SDL.h"
#include "SDL/SDL_image.h"
#include "SDL/SDL_ttf.h"

const int SCREEN_WIDTH = 640;
const int SCREEN_HEIGHT = 480;
const int SCREEN_BPP = 32;

SDL_Surface *background = NULL;
SDL_Surface *startStop = NULL;
SDL_Surface *seconds = NULL;
SDL_Surface *screen = NULL;

SDL_Event event;

TTF_Font *font = NULL;

SDL_Color textColor = {0xF0, 0xF0, 0xF0};

SDL_Surface *load_image(std::string filename)
{
	SDL_Surface *loadedImage = NULL;

	SDL_Surface *optimizedImage = NULL;

	loadedImage = IMG_Load(filename.c_str());

	if(loadedImage != NULL)
	{
		optimizedImage = SDL_DisplayFormat(loadedImage);

		SDL_FreeSurface(loadedImage);

		if(optimizedImage != NULL)
		{
			SDL_SetColorKey(optimizedImage, SDL_SRCCOLORKEY, SDL_MapRGB(optimizedImage->format, 0, 0xFF, 0xFF));
		}
	}
	return optimizedImage;
}

void apply_surface(int x, int y, SDL_Surface *source, SDL_Surface *destination, SDL_Rect *clip = NULL)
{
	SDL_Rect offset;

	offset.x = x;
	offset.y = y;

	SDL_BlitSurface(source, clip, destination, &offset);
}

bool init()
{
	if(SDL_Init(SDL_INIT_EVERYTHING) == -1)
	{
		return false;
	}

	screen = SDL_SetVideoMode(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_BPP, SDL_SWSURFACE);

	if(screen == NULL)
	{
		return false;
	}
	if(TTF_Init() == -1)
	{
		return false;
	}

	SDL_WM_SetCaption("Timer Test", NULL);

	return true;
}

bool load_files()
{
	background = load_image("background.png");

	font = TTF_OpenFont("lazy.ttf", 36);

	if (background == NULL)
	{
		return false;
	}
	if (font == NULL)
	{
		return false;
	}
	return true;
}

void clean_up()
{
	SDL_FreeSurface(background);
	SDL_FreeSurface(startStop);

	TTF_CloseFont(font);

	TTF_Quit();

	SDL_Quit();
}

int main(int argc, char *args[])
{
	bool quit = false;
	std::cout << "quit is false\n";

	Uint32 start = 0;
	std::cout << "Uint32 started\n";

	bool running = true;
	std::cout << "running is true\n";

	if(init() == false)
	{
		return 1;
	}
	std::cout << "init is true\n";
	if(load_files() == false)
	{
		return 1;
	}
	std::cout << "files are loaded\n";

	startStop = TTF_RenderText_Solid(font, "Press S to start or stop the timer", textColor);

	start = SDL_GetTicks();

	while(quit == false)
	{
		while(SDL_PollEvent(&event))
		{
			if(event.type == SDL_KEYDOWN)
			{
				if(event.key.keysym.sym == SDLK_s)
				{
					if (running == true)
					{
						running = false;
						start = 0;
					}
					else
					{
						running = true;
						start = SDL_GetTicks();
					}
				}
			}
			else if (event.type == SDL_QUIT)
			{
				quit = true;
			}
		}
	
		apply_surface(0, 0, background, screen);
	
		apply_surface((SCREEN_WIDTH - startStop->w) / 2, 200, startStop, screen);
	
		if(running == true)
		{
			std::stringstream time;
	
			time << "Time: " << SDL_GetTicks() - start;
	
			seconds = TTF_RenderText_Solid(font, time.str().c_str(), textColor);
	
			apply_surface((SCREEN_WIDTH - seconds->w) / 2, 50, seconds, screen);
	
			SDL_FreeSurface(seconds);
		}
	
		if(SDL_Flip(screen) == -1)
		{
			return 1;
		}
	}
	clean_up();
	return 0;
}
