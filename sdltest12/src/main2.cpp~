// headers
#include "SDL/SDL.h"
#include "SDL/SDL_image.h"
#include <string>

// Screen attributes
const int SCREEN_WIDTH = 640;
const int SCREEN_HEIGHT = 480;
const int SCREEN_BPP = 32;

// frame rate
const int FRAMES_PER_SECOND = 20;

// dot dimensions
const int DOT_WIDTH = 20;
const int DOT_HEIGHT = 20;

// dimensions of the level
const int LEVEL_WIDTH = 1280;
const int LEVEL_HEIGHT = 960;

// surfaces
SDL_Surface *wKey = NULL;
SDL_Surface *bKey = NULL;
SDL_Surface *background = NULL;
SDL_Surface *screen = NULL;

// event structure
SDL_Event event;

// camera
SDL_Rect camera = {0, 0, SCREEN_WIDTH, SCREEN_HEIGHT};

//dot class
class Dot
{
	private:
	// the x and y offsets of the dot
	int x, y;

	// The velocity of the dot
	int xVel, yVel;

	public:
	// Initializes the variables
	Dot();

	// takes key presses and adjuest the dot's velocity
	void handle_input();

	// moves the dot
	void move();

	// Shows the dot on the screen
	void show();

	//Sets the camera over the dot
	void set_camera();
};

// timer class
class Timer
{
	private:
	// the clock time when the timer started
	int startTicks;

	// The ticks stored when the timer was paused
	int pausedTicks;

	// The timer status
	bool paused;
	bool started;

	public:
	// Init varaibles
	Timer();

	// the various clock actions
	void start();
	void stop();
	void pause();
	void unpause();

	// gets the timers time
	int get_ticks();

	// checks the status of the timer
	bool is_started();
	bool is_paused();
};

SDL_Surface *load_image(std::string filename)
{
	// the images thats loaded
	SDL_Surface *loadedImage = NULL;

	// the optimized image
	SDL_Surface *optimizedImage = NULL;

	loadedImage = IMG_Load(filename.c_str());

	// if the image loaded
	if(loadedImage != NULL)
	{
		// create an optimized image
		optimizedImage = SDL_DisplayFormat(loadedImage);

		// free old surface
		SDL_FreeSurface(loadedImage);

		// if the usrface was optimized
		if (optimizedImage != NULL)
		{
			// color key surface
			SDL_SetColorKey(optimizedImage, SDL_SRCCOLORKEY, SDL_MapRGB(optimizedImage->format, 0, 0xFF, 0xFF));
		}
	}

	// return the optimized surface
	return optimizedImage;
}

void apply_surface( int x, int y, SDL_Surface *source, SDL_Surface *destination, SDL_Rect *clip = NULL)
{
	// Holds offsets
	SDL_Rect offset;

	// get offsets;
	offset.x = x;
	offset.y = y;

	// Blit
	SDL_BlitSurface(source, clip, destination, &offset);
}

bool init()
{
	// initialize all SDL subsystems
	if(SDL_Init(SDL_INIT_EVERYTHING) == -1)
	{
		return false;
	}

	// Set up the screen
	screen = SDL_SetVideoMode(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_BPP, SDL_SWSURFACE);

	// if there was an error in setting up the screen
	if (screen == NULL)
	{
		return false;
	}

	// Set the window caption
	SDL_WM_SetCaption("Move the Dot", NULL);

	// If everything initialized fine
	return true;
}

bool load_files()
{
	// Load the dot image
	wKey = load_image("wKey.bmp");

	// Load the black key
	bKey = load_image("bKey.bmp");

	// load the background
	background = load_image("bg.png");

	// if there was a problem in loading the dot
	if (wKey == NULL)
	{
		return false;
	}

	// if there was a problem inloading the black key
	if (bKey == NULL)
	{
		return false;
	}

	// If there was a problem in loading the background
	if (background == NULL)
	{
		return false;
	}

	// if everthing loaded fine
	return true;
}

void clean_up()
{
	// Free the surfaces
	SDL_FreeSurface(wKey);
	SDL_FreeSurface(bKey);
	SDL_FreeSurface(background);

	// Quit SDL
	SDL_Quit();
}

int main(int argc, char *args[])
{
	// Quti flag
	bool quit = false;

	// The dot
//	Dot myDot;

	// the frame rate regulator
//	Timer fps;

	// init
	if(init() == false)
	{
		return 1;
	}

	// load the files
	if(load_files() == false)
	{
		return 1;
	}

	// While the user hasn't quit
	while(quit == false)
	{
		// Start the frame timer
//		fps.start();

		// while there events to handle
		while(SDL_PollEvent(&event))
		{
			//Handle events for the dot
//			myDot.handle_input();

			//If the user has Xed out of the window
			if(event.type == SDL_QUIT)
			{
				// quit the program
				quit = true;
			}
		}

		// Move the dot
	//	myDot.move();

		// Set the camera
	//	myDot.set_camera();

		// Show the background
		apply_surface(0, 0, background, screen, &camera);

		apply_surface(10, 10, wKey, background);

		apply_surface(50, 10, wKey, background);

		apply_surface(90, 10, wKey, background);

		apply_surface(35, 10, bKey, background);

		apply_surface(75, 10, bKey, background);
		
		// show the dot on the screen
	//	myDot.show();

		// Update the screen
		if(SDL_Flip(screen) == -1 )
		{
			return 1;
		}

		// cap the frame rate
//		if(fps.get_ticks() < 1000 / FRAMES_PER_SECOND)
//		{
//			SDL_Delay((1000 / FRAMES_PER_SECOND) - fps.get_ticks());
//		}
	}

	// Clean up
	clean_up();

	return 0;
}
