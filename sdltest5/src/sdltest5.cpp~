//============================================================================
// Name        : sdltest5.cpp
// Author      : paul
// Version     :
// Copyright   : no copyright
// Description : Hello World in C++, Ansi-style
//============================================================================

// the headers
#include "SDL/SDL.h"
#include "SDL/SDL_image.h"
#include "SDL/SDL_ttf.h"
#include <string>
#include <iostream>
using namespace std;

//Screen attributes
const int SCREEN_WIDTH = 640;
const int SCREEN_HEIGHT = 480;
const int SCREEN_BPP = 32;

//The surface
SDL_Surface *background = NULL;
SDL_Surface *message = NULL;
SDL_Surface *screen = NULL;

//The event structure
SDL_Event event;

//The font that's going to be used
TTF_Font *font = NULL;

//The color of the font
SDL_Color textColor = {255, 255, 255};

SDL_Surface *load_image(string filename)
{
	//The image that's loaded
	SDL_Surface * loadedImage = NULL;

	//The optimized surface that will be used
	SDL_Surface *optimizedImage = NULL;

	// Load the image
	loadedImage = IMG_Load(filename.c_str());

	//If the image loaded
	if(loadedImage != NULL)
	{
		//Create an optimized surface
		optimizedImage = SDL_DisplayFormat(loadedImage);

		//Free the old surface
		SDL_FreeSurface(loadedImage);

		//If the surface was optimized
		if(optimizedImage != NULL)
		{
			// Color key surface
			SDL_SetColorKey(optimizedImage, SDL_SRCCOLORKEY, SDL_MapRGB(optimizedImage->format, 0, 0xFF, 0xFF));
		}
	}

	// Return the optimized surface
	return optimizedImage;
}

void apply_surface(int x, int y, SDL_Surface *source, SDL_Surface *destination, SDL_Rect *clip = NULL)
{
	//Holds offsets
	SDL_Rect offset;

	// Get offsets
	offset.x = x;
	offset.y = y;

	// Blit
	SDL_BlitSurface(source, clip, destination, &offset);
}

bool init()
{
	// Initialize all SDL subsystems
	if(SDL_Init(SDL_INIT_EVERYTHING) == -1)
	{
		return false;
	}

	//Set up the screen
	screen = SDL_SetVideoMode(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_BPP, SDL_SWSURFACE);

	//If there was an error in setting up the screen
	if(screen == NULL)
	{
		return false;
	}

	//Initialize SDL_ttf
	if(TTF_Init() == -1)
	{
		return false;
	}

	//Set the window caption
	SDL_WM_SetCaption("TTF Test", NULL);

	// If everything initialized fine
	return true;
}

bool load_files()
{
	//Load the background image
	background = load_image("background.png");

	//Open the font
	font = TTF_OpenFont("lazy.ttf", 28);

	// If there was a problem in loading the background
	if (background == NULL)
	{
		return false;
	}

	//If there was an error in loading the font
	if (font == NULL)
	{
		return false;
	}

	// If everything loaded fine
	return true;
}

void clean_up()
{
	// Free the surfaces
	SDL_FreeSurface(background);
	SDL_FreeSurface(message);

	// Close the font that was used
	TTF_CloseFont(font);

	// Quit SDL_ttf
	TTF_Quit();

	// Quit SDL
	SDL_Quit();
}

int main(int argc, char *args[]) {

	// Quit flag
	bool quit = false;

	// Initialize
	if(init() == false)
	{
		return 1;
	}

	// Load the files
	if (load_files() == false)
	{
		return 1;
	}

	// Render the text
	message = TTF_RenderText_Shaded(font, "The quick brown fox jumps over the lazy dog", textColor);

	// if there was an erro in render the text
	if (message == NULL)
	{
		return 1;
	}

	// Apply the items to the screen
	apply_surface(0,0, background, screen);
	apply_surface(0, 150, message, screen);

	//Update the screen
	if (SDL_Flip(screen) == -1)
	{
		return 1;
	}

	// while the user hasnt quit
	while(quit == false)
	{
		// while there's events to handle
		while (SDL_PollEvent(&event))
		{
			// If the user has Xed out of the window
			if (event.type == SDL_QUIT)
			{
				//Quit the program
				quit = true;
			}
		}
	}

	// Free surfaces and font then quit SDL_ttf and SDL
	clean_up();

	return 0;
}
